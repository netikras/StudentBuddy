#!/bin/bash


COOKIEFILE="/tmp/stubu.cookie"

URL_API="http://localhost:8080/stubu/api"

alias s_curl="curl -L -k -b \"${COOKIEFILE}\" -H'Accept:application/json' -H'Content-type:application/json' -s " ## service
alias sl_curl="curl -L -k -c \"${COOKIEFILE}\" -H'Accept:application/json' -H'Content-type:application/json' -s " ## login

_OK=1
_NOK=0

sb_curl() {
    local method="${1:?HTTP method missing}"
    shift;
    local endpoint="${1:?Endpoint missing}"
    shift;

    local result=$(s_curl "${URL_API}${endpoint}" -w "\nstatus[${endpoint}]: %{http_code}" -X "${method}" ${@});
    local status=$(echo "${result}" | tail -1);
    local code=$(echo "${status}" | sed -e 's/^.*: //g')

    echo "${result}" | sed -e 's/^status\[.*\]: [0-9]*$//g'
    echo "${status}" >&2

    { [[ ${code:-600} -ge 400 ]] || [[ ${code:-000} -lt 100 ]] ; } && return ${_OK} || return ${_NOK}
}

mkjsonarr() {
    local arr="[";
    local first=true
    for elem in "${@}" ; do
        [ -z "${elem}" ] && continue;

        [[ ${first} = false ]] && {
            arr="${arr},";
        } || {
            first=false
        }

        arr="${arr}\"${elem}\""
    done;

    echo "${arr}]"
}

mkjsonobj() {
    local json="{";
    local first=true
    local key;
    local value;

    for elem in "${@}" ; do
    
        key="${elem%%:*}"
        value="${elem#*:}"
        [ -z "${value}" ] && {
            value="null";
        } || {
            { [[ "${value}" =~ ^\[.*\]$ ]] || [[ "${value}" =~ ^\{.*\}$ ]] ; } && {
                :;
            } || {
                value="\"${value}\"";
            }
        }

        key="\"${key}\"";

        [[ ${first} = false ]] && {
            key=",${key}"
        } || {
            first=false
        }
    
        json="${json}${key}:${value}"
    done; 
    
    json="${json}}"

    echo "${json}"
}

## optional value
optional() {
    local value=${1:--}
    local def=${2}

    { [ -z "${value}" ] || [ "${value}" = "-" ] ; } && {
        value=${def}
    }   
    echo "${value}"
}

urlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"    # You can either set a return variable (FASTER) 
  URLENCODED="${encoded}"   #+or echo the result (EASIER)... or both... :p

}

adjustTimestamp() {
    local timestamp=${1}

    [ -z "${timestamp}" ] && {
        echo "";
        return
    }

    while [[ ${#timestamp} -lt 13 ]] ; do
        timestamp="${timestamp}0";
    done;

    while [[ ${#timestamp} -gt 13 ]] ; do
        timestamp="${timestamp:0:-1}";
    done;

    echo "${timestamp}"
}


validateTimeUnit() {
    local unit=${1}

    [ -z "${unit}" ] && return ${_NOK}

    case ${unit} in
        "M") ;; ## months
        "d") ;; ## days
        "H") ;; ## hours
        "m") ;; ## minutes
        "s") ;; ## seconds
        *) return ${_NOK}
    esac;

    return ${_OK}
}
